@page "/Categories"
@inject IRepository repository
@inject SweetAlertService sweetAlertService 

<h3>Categories</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" href="/countries/create">New Category</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="title" placeholder="Search Category..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filter</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Clean</button>
    </div>
</div>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />

<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Category</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var category in Categories!)
                {
                    <tr>
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="@(() => DeleteCategoryAsync(category.Id))">Delete</button>
                        </td>
                        <td>@category.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
    <NoRecords>
        There are no Categories to show.
    </NoRecords>
</GenericList>

@code {
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    public List<Category>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task DeleteCategoryAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Warning",
            Text = "Do you want to delete the row?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Yes"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"api/categories/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();

    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/categories?page={page}";
            url2 = $"api/categories/totalPages";
        }
        else
        {
            url1 = $"api/categories?page={page}&filter={Filter}";
            url2 = $"api/categories/totalPages?filter={Filter}";
        }

        var responseHppt = await repository.GetAsync<List<Category>>(url1);
        var responseHppt2 = await repository.GetAsync<int>(url2);
        Categories = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}

