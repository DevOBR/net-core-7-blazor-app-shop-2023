@page "/Categories"
@inject IRepository repository
@inject SweetAlertService sweetAlertService 

<h3>Categories</h3>

<a class="btn btn-primary mb-3" href="/categories/create">New Category</a>

<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Category</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var category in Categories!)
                {
                    <tr>
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="@(() => DeleteCategoryAsync(category.Id))">Delete</button>
                        </td>
                        <td>@category.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
    <NoRecords>
        There are no Categories to show.
    </NoRecords>
</GenericList>

@code {
    public List<Category>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
    }

    private async Task DeleteCategoryAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Warning",
            Text = "Do you want to delete the row?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Yes"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"api/categories/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadCategoriesAsync();

    }

    private async Task LoadCategoriesAsync()
    {
        var responseHttp = await repository.GetAsync<List<Category>>("api/categories");
        Categories = responseHttp.Response;
    }
}

