@page "/Categories"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

<div class="card">
    <div class="card-header">
        <span>
            <i class="oi oi-plus"></i> Categories
            <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModalAsync())><i class="oi oi-plus"></i> Add new Category</a>
        </span>
    </div>
    <div class="card-body">
        <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
            <div>
                <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search Category..." @bind-value="Filter" />
            </div>
            <div class="mx-1">
                <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filter</button>
                <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Clear</button>
            </div>
        </div>

        <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPageAsync" />

        <GenericList MyList="Categories">
            <Body>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in Categories!)
                        {
                            <tr>
                                <td>@category.Name</td>
                                <td>
                                    <a @onclick=@(() => ShowModalAsync(category.Id, true)) class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Edit</a>
                                    <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteCategoryAsync(category.Id))><i class="oi oi-trash" /> Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
            <NoRecords>
                There are no Categories to show.
            </NoRecords>
        </GenericList>
    </div>
</div>

@code {
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    public List<Category>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task ShowModalAsync(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CategoryEdit>(string.Empty, new ModalParameters().Add("CategoryId", id));
        }
        else
        {
            modalReference = Modal.Show<CategoryCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    private async Task DeleteCategoryAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Warning",
            Text = "Do you want to delete the row?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Yes"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"api/categories/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();

    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/categories?page={page}";
            url2 = $"api/categories/totalPages";
        }
        else
        {
            url1 = $"api/categories?page={page}&filter={Filter}";
            url2 = $"api/categories/totalPages?filter={Filter}";
        }

        var responseHppt = await repository.GetAsync<List<Category>>(url1);
        var responseHppt2 = await repository.GetAsync<int>(url2);
        Categories = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}

