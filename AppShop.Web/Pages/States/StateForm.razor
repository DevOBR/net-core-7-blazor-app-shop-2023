@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>State: </label>
        <div>
            <InputText class="form-control" @bind-Value="@State.Name" />
            <ValidationMessage For="@(() => State.Name)" />
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Save Changes</button>
    <button class="btn btn-success" type="button" @onclick="ReturnAction">Return</button>
</EditForm>

@code {

    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public State State { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(State);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext locationChangingContext)
    {
        var formWasModified = editContext.IsModified();

        if (!formWasModified || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Warning",
            Text = "You haven't save your changes, do you want to exit from this page and lose your changes?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Yes"
        });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        locationChangingContext.PreventNavigation();
    }
}

