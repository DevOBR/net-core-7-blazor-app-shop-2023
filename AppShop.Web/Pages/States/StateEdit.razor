@page "/state/edit/{StateId:int}"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<h3>Edit State / Departments</h3>

@if (state is null)
{
    <p>Loading...</p>
}
else
{
    <StateForm @ref="stateForm" State="state" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private StateForm? stateForm;
    private State? state;

    [Parameter]
    public int StateId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.GetAsync<State>($"api/states/{StateId}");

        if (responseHttp.Error)
        {

            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.PutAsync("api/states", state);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        stateForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/countries/details/{state!.CountryId}");
    }
}

