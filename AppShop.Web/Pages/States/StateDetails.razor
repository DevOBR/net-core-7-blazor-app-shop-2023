@page "/state/details/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


@if (state is null)
{
    <p>Loading...</p>
}
else
{
    <h3>@state.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/cities/create/@StateId">New City</a>
        <a class="btn btn-success" href="/countries/details/@state.CountryId">Return</a>
    </div>

    <GenericList MyList="state.Cities!.ToList()">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>City</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var city in state.Cities!.ToList())
                    {
                        <tr>
                            <td>
                                @city.Name
                            </td>
                            <td>
                                <a href="/cities/edit/@city.Id" class="btn btn-warning">Edit</a>
                                <button class="btn btn-danger" @onclick="@(() => DeleteCountryAsync(city.Id))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
        <NoRecords>
            There are no Countries to show.
        </NoRecords>
    </GenericList>
}


@code {
    private State? state;

    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task DeleteCountryAsync(int cityId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Warning",
            Text = "Do you want to delete the row?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Yes"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"api/cities/{cityId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<State>($"/api/states/{StateId}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response;
    }
}