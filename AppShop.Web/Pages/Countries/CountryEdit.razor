@page "/countries/edit/{CountryId:int}"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<h3>Country Edit</h3>

@if (country is null)
{
    <div class="spinner" />
}
else
{
    <CountryForm @ref="countryForm" Country="country" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {

    private CountryForm? countryForm;
    private Country? country;

    [Parameter]
    public int CountryId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.GetAsync<Country>($"api/countries/{CountryId}");

        if (responseHttp.Error)
        {

            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        country = responseHttp.Response;

    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.PutAsync("api/countries", country);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());

        Return();
    }

    private void Return()
    {
        countryForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/countries");
    }

}

