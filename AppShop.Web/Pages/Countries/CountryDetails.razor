@page "/countries/details/{id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (country is null)
{
    <p>Loading...</p>
}
else
{
    <h3>@country.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/states/create/@country.Id">New State</a>
        <a class="btn btn-success" href="/countries">Return</a>
    </div>

    <GenericList MyList="country.States!.ToList()">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>State</th>
                        <th>Cities</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in country.States!.ToList())
                    {
                        <tr>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CitiesNumber
                            </td>
                            <td>
                                <a href="/state/details/@state.Id" class="btn btn-info">Details</a>
                                <a href="/state/edit/@state.Id" class="btn btn-warning">Edit</a>
                                <button class="btn btn-danger" @onclick="@(() => DeleteCountryAsync(state.Id))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
        <NoRecords>
            There are no Countries to show.
        </NoRecords>
    </GenericList>
}


@code {
    private Country? country;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task DeleteCountryAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Warning",
            Text = "Do you want to delete the row?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            CancelButtonText = "No",
            ConfirmButtonText = "Yes"
        });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"api/states/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<Country>($"/api/countries/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        country = responseHttp.Response;
    }

}

